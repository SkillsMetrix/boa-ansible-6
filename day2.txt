from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

SQL_DB = "sqlite:///./mytest.db"

engine = create_engine(
    SQL_DB, connect_args={"check_same_thread": False}

)
SessioLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()


def get_connection():
    db = SessioLocal()
    try:
        yield db
    finally:
        db.close()

-----------


from sqlalchemy import Column,String

from .database import Base

class UserApp(Base):
    __tablename__="USERAPP"

    uname=Column(String,primary_key=True)
    email=Column(String)
    city=Column(String)



----

from fastapi import FastAPI
from .database import engine,get_connection

from . import crudapp,models

models.Base.metadata.create_all(bind=engine)
app= FastAPI()

app.include_router(crudapp.router)


------

from fastapi import FastAPI,status,HTTPException,APIRouter,Depends
from random import randrange
from .import schemas,models
from sqlalchemy.orm import Session 
from .database import engine,get_connection

# creating fast api object

router= APIRouter(tags=["User Application"])
# dummy records
user_data=[]

# common find method to search the record (will help in search,update and delete)
def findById(id):
    for i,p in enumerate(user_data):
        if p['id'] == id:
            print(i,p)
            return i

#test db connection
@router.get('/test')
def conntest(db:Session=Depends(get_connection)):
    return {"status":"connected"}

# load the users from the server
@router.get('/loadusers')
def loadusers():
    return {'message':user_data}

#load specific record
@router.get('/loaduser/{id}')
def loadUserById(id:int):
    data=findById(id)
    if data == None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,detail= "OOPS, user not found"
        )
    return {'user found ': data}

# delete the found record
@router.delete('/deleteuser/{id}')
def deleteUserById(id:int):
    data=findById(id)
    if data == None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,detail= "OOPS, user not found"
        )
    user_data.pop(data)
    return {'message ': 'user found and deleted '}

# update the found record with the new records
@router.put('/updateuser/{id}')
def updateUserById(id:int,payload: schemas.User):
    data=findById(id)
    if data == None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,detail= "OOPS, user not found"
        )
    udata=payload.model_dump()
    udata['id']=id
    user_data[data]=udata
    return {'message ': 'user found and updted '}

# add a new record
@router.post('/create', status_code=status.HTTP_201_CREATED)
def addUser(payload: schemas.User):
    postdata= payload.model_dump()
    postdata['id']=randrange(0,1000)
    user_data.append(postdata)
    return {'userdata':postdata}
